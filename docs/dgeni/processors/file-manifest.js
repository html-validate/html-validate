const fs = require("node:fs/promises");
const path = require("node:path");
const isCI = require("is-ci");

const self = path.relative(process.cwd(), __filename);
const ignoreTypes = ["validate-spec", "validate-public"];

function isRelevant(doc) {
	return doc.outputPath && !ignoreTypes.includes(doc.docType);
}

module.exports = function fileManifestProcessor(log) {
	return {
		manifestLocation: null,
		$validate: {
			manifestLocation: { presence: true },
		},
		$runAfter: ["writing-files"],
		$runBefore: ["files-written"],
		async $process(docs) {
			const { manifestLocation } = this;
			const relevantDocs = docs.filter(isRelevant);
			const lines = [
				"## Documentation manifest",
				"",
				`> Do not edit this file. It is a report generated by ${self}.`,
				"",
				"---",
				"",
				...relevantDocs.map((doc) => doc.outputPath).sort(),
			];
			const content = lines.map((it) => `${it}\n`).join("");

			const current = await fs.readFile(manifestLocation, "utf-8");
			const upToDate = content === current;

			if (upToDate) {
				return;
			}

			if (isCI) {
				log.error(
					`Documentation manifest (${path.relative(process.cwd(), manifestLocation)}) is not up-to-date!`,
				);
				log.error(`Build and commit the file locally before continuing!`);
				throw new Error("Documentation manifest error");
			} else {
				log.info("Updating documentation manifest");
				await fs.writeFile(manifestLocation, content, "utf-8");
			}
		},
	};
};
