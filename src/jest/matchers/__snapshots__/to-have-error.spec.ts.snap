// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`toHaveError() should fail if error has mismatched context 1`] = `
"expect(received).toHaveError(expected)

Expected error to equal:
  [ObjectContaining {\\"context\\": {\\"foo\\": \\"spam\\"}, \\"message\\": \\"mock message\\", \\"ruleId\\": \\"my-rule\\"}]
Received:
  [{\\"column\\": 8, \\"context\\": {\\"foo\\": \\"bar\\"}, \\"line\\": 4, \\"message\\": \\"mock message\\", \\"offset\\": 37, \\"ruleId\\": \\"my-rule\\", \\"selector\\": \\"#foo > div\\", \\"severity\\": 2, \\"size\\": 11}]

Difference:

- Expected
+ Received

  Array [
-   ObjectContaining {
+   Object {
+     \\"column\\": 8,
      \\"context\\": Object {
-       \\"foo\\": \\"spam\\",
+       \\"foo\\": \\"bar\\",
      },
+     \\"line\\": 4,
      \\"message\\": \\"mock message\\",
+     \\"offset\\": 37,
      \\"ruleId\\": \\"my-rule\\",
+     \\"selector\\": \\"#foo > div\\",
+     \\"severity\\": 2,
+     \\"size\\": 11,
    },
  ]"
`;

exports[`toHaveError() should fail if expected async error is missing 1`] = `
"expect(received).toHaveError(expected)

Expected error to equal:
  [ObjectContaining {\\"message\\": \\"asdf\\", \\"ruleId\\": \\"asdf\\"}]
Received:
  [{\\"column\\": 8, \\"context\\": {\\"foo\\": \\"bar\\"}, \\"line\\": 4, \\"message\\": \\"mock message\\", \\"offset\\": 37, \\"ruleId\\": \\"my-rule\\", \\"selector\\": \\"#foo > div\\", \\"severity\\": 2, \\"size\\": 11}]

Difference:

- Expected
+ Received

  Array [
-   ObjectContaining {
-     \\"message\\": \\"asdf\\",
-     \\"ruleId\\": \\"asdf\\",
+   Object {
+     \\"column\\": 8,
+     \\"context\\": Object {
+       \\"foo\\": \\"bar\\",
+     },
+     \\"line\\": 4,
+     \\"message\\": \\"mock message\\",
+     \\"offset\\": 37,
+     \\"ruleId\\": \\"my-rule\\",
+     \\"selector\\": \\"#foo > div\\",
+     \\"severity\\": 2,
+     \\"size\\": 11,
    },
  ]"
`;

exports[`toHaveError() should fail if expected error is missing 1`] = `
"expect(received).toHaveError(expected)

Expected error to equal:
  [ObjectContaining {\\"message\\": \\"asdf\\", \\"ruleId\\": \\"asdf\\"}]
Received:
  [{\\"column\\": 8, \\"context\\": {\\"foo\\": \\"bar\\"}, \\"line\\": 4, \\"message\\": \\"mock message\\", \\"offset\\": 37, \\"ruleId\\": \\"my-rule\\", \\"selector\\": \\"#foo > div\\", \\"severity\\": 2, \\"size\\": 11}]

Difference:

- Expected
+ Received

  Array [
-   ObjectContaining {
-     \\"message\\": \\"asdf\\",
-     \\"ruleId\\": \\"asdf\\",
+   Object {
+     \\"column\\": 8,
+     \\"context\\": Object {
+       \\"foo\\": \\"bar\\",
+     },
+     \\"line\\": 4,
+     \\"message\\": \\"mock message\\",
+     \\"offset\\": 37,
+     \\"ruleId\\": \\"my-rule\\",
+     \\"selector\\": \\"#foo > div\\",
+     \\"severity\\": 2,
+     \\"size\\": 11,
    },
  ]"
`;

exports[`toHaveError() should handle passing object as expected error 1`] = `
"expect(received).toHaveError(expected)

Expected error to equal:
  [ObjectContaining {\\"line\\": 3, \\"ruleId\\": \\"asdf\\", \\"size\\": 12}]
Received:
  [{\\"column\\": 8, \\"context\\": {\\"foo\\": \\"bar\\"}, \\"line\\": 4, \\"message\\": \\"mock message\\", \\"offset\\": 37, \\"ruleId\\": \\"my-rule\\", \\"selector\\": \\"#foo > div\\", \\"severity\\": 2, \\"size\\": 11}]

Difference:

- Expected
+ Received

  Array [
-   ObjectContaining {
-     \\"line\\": 3,
-     \\"ruleId\\": \\"asdf\\",
-     \\"size\\": 12,
+   Object {
+     \\"column\\": 8,
+     \\"context\\": Object {
+       \\"foo\\": \\"bar\\",
+     },
+     \\"line\\": 4,
+     \\"message\\": \\"mock message\\",
+     \\"offset\\": 37,
+     \\"ruleId\\": \\"my-rule\\",
+     \\"selector\\": \\"#foo > div\\",
+     \\"severity\\": 2,
+     \\"size\\": 11,
    },
  ]"
`;
