#!/usr/bin/env node

/* eslint-disable node/shebang, no-console */

const { CLI } = require("..");
const babar = require("babar");

function iteration() {
	if (global.gc) {
		global.gc();
	}

	const cli = new CLI();
	const htmlValidate = cli.getValidator();
	htmlValidate.validateString("<!DOCTYPE html><html><head></head><body></body></html>");
}

function percent(cur, prev) {
	const k = cur / prev;
	const p = (k - 1) * 1000;
	return p > 0 ? Math.floor(p) / 10 : Math.ceil(p) / 10;
}

const numCycles = process.argv.length > 2 ? Number(process.argv[2]) : 5000;
const journal = [];
for (let cycle = 0; cycle <= numCycles; cycle++) {
	iteration();
	const { heapTotal, heapUsed } = process.memoryUsage();
	if (cycle % 200 === 0) {
		const previousTotal = journal.length > 0 ? journal[journal.length - 1].heapTotal : 1;
		const previousUsed = journal.length > 0 ? journal[journal.length - 1].heapUsed : 1;
		journal.push({
			cycle,
			heapTotal,
			"heapTotal (%)": percent(heapTotal, previousTotal),
			heapUsed,
			"heapUsed (%)": percent(heapUsed, previousUsed),
		});
	}
	process.stdout.clearLine(0);
	process.stdout.cursorTo(0);
	process.stdout.write(`${cycle} / ${numCycles} iterations done, ${heapTotal} heap used`);
}
process.stdout.write("\n");
console.table(journal);

const values = journal.map((it) => it.heapTotal);
console.log("min:", Math.min(...values), "max:", Math.max(...values));

const heapTotal = journal.map((it, i) => [i, it.heapTotal / 1024 ** 2]);
const chartTotal = babar(heapTotal, {
	caption: "Heap total (MB per 100 runs)",
	color: "green",
	width: 100,
	height: 20,
	minY: 0,
	yFractions: 0,
});
console.log(chartTotal);

const heapUsed = journal.map((it, i) => [i, it.heapUsed / 1024 ** 2]);
const chartUsed = babar(heapUsed, {
	caption: "Heap used (MB per 100 runs)",
	color: "green",
	width: 100,
	height: 20,
	minY: 0,
	yFractions: 0,
});
console.log(chartUsed);
