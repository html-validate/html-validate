image: node:22

include:
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml

variables:
  FORCE_DEPLOY_DOCS:
    value: "no"
    options:
      - "yes"
      - "no"
    description: 'Force documentation to be redeployed. Ensure no commits references documentation about non-released features. Only relevant on "master"'

stages:
  - prepare
  - build
  - test
  - compatibility
  - release
  - postrelease

secret_detection:
  needs:
    - Build
  dependencies:
    - Build
  variables:
    SECRET_DETECTION_EXCLUDED_PATHS: node_modules

NPM:
  stage: prepare
  artifacts:
    name: ${CI_PROJECT_PATH_SLUG}-${CI_PIPELINE_ID}-npm
    paths:
      - .husky/
      - node_modules/
      - docs/node_modules/
      - tests/vitest/node_modules/
    reports:
      dependency_scanning: gl-dependency-scanning.json
  script:
    - node --version
    - npm --version
    - npm ci --no-fund --no-audit --no-update-notifier
    - npm audit --json --omit=dev | npx --yes gitlab-npm-audit-parser -o gl-dependency-scanning.json || true
    - npx sort-package-json --check

Build:
  stage: build
  artifacts:
    name: ${CI_PROJECT_PATH_SLUG}-${CI_PIPELINE_ID}-build
    when: always
    paths:
      - dist/
      - src/generated/
      - temp/
  script:
    - npm run --if-present build
    - npm pack
    - npm exec npm-pkg-lint
    - |
      for dts in dist/{cjs,esm}/{index,browser,jest,test-utils}.d.ts; do
        if [[ ! -e "${dts}" ]]; then
          echo "${dts}" is missing from package
          exit 1
        fi
      done

pages:
  stage: build
  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master" && $CI_COMMIT_MESSAGE =~ /^chore\(release\):/'
    - if: '$CI_COMMIT_REF_NAME == "master" && $FORCE_DEPLOY_DOCS == "yes"'
  script:
    - npm run --if-present build
    - npm run docs

Changelog:
  stage: test
  needs:
    - NPM
  dependencies:
    - NPM
  script:
    - npm exec commitlint -- --from=origin/master --to=${CI_COMMIT_SHA}

ESLint:
  stage: test
  needs:
    - NPM
    - Build
  script:
    - npm run codegen
    - npm run eslint -- --max-warnings 0

Jest:
  stage: test
  dependencies:
    - NPM
  needs:
    - NPM
  coverage: /Branches\s+:\s+([\d\.]+%)/
  artifacts:
    name: ${CI_PROJECT_PATH_SLUG}-${CI_PIPELINE_ID}-coverage
    paths:
      - coverage
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
      junit: temp/jest.xml
  script:
    - npm run codegen
    - npm test -- src/ tests/

Prettier:
  stage: test
  needs:
    - NPM
  dependencies:
    - NPM
  script:
    - npm run prettier:check

Docs:
  stage: test
  dependencies: []
  needs: []
  artifacts:
    reports:
      junit: temp/jest.xml
  script:
    - npm ci
    - npm run codegen
    - npm run build
    - npm run docs
    - npm run htmlvalidate -- --formatter codeframe --config docs/htmlvalidate-public.json 'public/**/*.html'
    - npm test -- --no-coverage docs
    - npm exec eslint docs/examples
    - git status
    - test -z "$(git status --porcelain)" || (echo 'working copy dirty, need to commit updated specs'; exit 1)

.compat:
  stage: compatibility
  dependencies: []
  needs: []
  before_script:
    - npm ci --no-fund --no-audit --no-update-notifier
  script:
    - npm run codegen
    - npm run --if-present build
    - npm test -- --no-coverage --ci --testPathIgnorePatterns matchers --workerThreads 1 --logHeapUsage -- src tests/jest
    - npm run -w tests/vitest test
    - npm run compatibility

Node:
  extends: .compat
  parallel:
    matrix:
      - VERSION:
          - "20.19"
          - "20"
          - "22.12"
          - "22"
  variables:
    NODE_OPTIONS: "--max_old_space_size=4096"
  image: node:${VERSION}

Jest compat:
  stage: compatibility
  dependencies: []
  needs: []
  parallel:
    matrix:
      - MATRIX:
          - 28
          - 29
          - 30
  before_script:
    - npm ci --no-fund --no-audit --no-update-notifier
    - npm run build
    - npm pkg delete workspaces
    - export TYPES_VERSION=$(node scripts/get-min-version.js "${MATRIX}" "@types/jest")
    - export JEST_VERSION=$(node scripts/get-min-version.js "${MATRIX}" "jest")
    - export TS_JEST_VERSION=$(node scripts/get-min-version.js "${MATRIX}" "ts-jest")
    - export TS_VERSION=$(node scripts/get-min-version.js "${MATRIX}" "typescript")
    - |
      echo "jest version: ${JEST_VERSION}"
      echo "typescript version: ${TS_VERSION}"
      echo "@types version: ${TYPES_VERSION}"
    - >
      npm rm rollup-plugin-dts
    - >
      npm install --force
      @jest/core@${JEST_VERSION}
      @jest/expect@${JEST_VERSION}
      jest@${JEST_VERSION}
      jest-circus@${JEST_VERSION}
      jest-diff@${JEST_VERSION}
      jest-environment-jsdom@${JEST_VERSION}
      jest-runtime@${JEST_VERSION}
      jest-snapshot@${JEST_VERSION}
      ts-jest@${TS_JEST_VERSION}
      typescript@${TS_VERSION}
      @types/jest@${TYPES_VERSION}
    - npm dedupe
    - >
      npm ls
      @jest/core
      @jest/expect
      jest
      jest-circus
      jest-diff
      jest-environment-jsdom
      jest-runtime
      jest-snapshot
      pretty-format
      ts-jest
      typescript
      @types/jest
  script:
    - sed 's#/src/browser.ts#/dist/cjs/browser.js#g' -i package.json
    # older jest/ts-jest versions doesn't work with bundler so use nodenext instead
    - sed '/"moduleResolution"/s/bundler/nodenext/' -i tsconfig.json
    - sed '/"lib"/s/es2023/es2022/' -i tsconfig.json
    - for spec in tests/jest/*.spec.ts; do sed 's#../../src#../../dist/cjs#g' -i "${spec}"; done
    - npm exec jest -- --no-coverage --ci --logHeapUsage -- tests/jest

Vitest compat:
  stage: compatibility
  dependencies: []
  needs: []
  parallel:
    matrix:
      - VERSION:
          - 1
          - 2
          - 3
  before_script:
    - npm ci --no-fund --no-audit --no-update-notifier
    - npm run build
    - npm install -w tests/vitest --include-workspace-root $(npx -y npm-min-peer vitest --major ${VERSION} --with-name)
    - npm ls vite vitest
  script:
    - npm run -w tests/vitest test

Module:
  stage: compatibility
  dependencies:
    - NPM
    - Build
  needs:
    - NPM
    - Build
  parallel:
    matrix:
      - BUILD:
          - esm
          - cjs
  script:
    - npm exec tsc -- --build tests/integration/${BUILD}
    - node tests/integration/${BUILD}
    - npm exec html-validate tests/integration/${BUILD}-cli

.release:
  stage: release
  variables:
    GIT_AUTHOR_NAME: ${GITLAB_USER_NAME}
    GIT_AUTHOR_EMAIL: ${GITLAB_USER_EMAIL}
    GIT_COMMITTER_NAME: ${HTML_VALIDATE_BOT_NAME}
    GIT_COMMITTER_EMAIL: ${HTML_VALIDATE_BOT_EMAIL}
  before_script:
    - npm install -g $(node -p 'require("./package.json").release.extends')
    - node --version

Dry run:
  extends: .release
  needs: []
  dependencies: []
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
    - if: '$CI_COMMIT_REF_NAME == "next"'
    - if: '$CI_COMMIT_REF_NAME =~ /^release\//'
  script:
    - npm exec semantic-release -- --dry-run

Release:
  extends: .release
  tags:
    - saas-linux-small-amd64
  id_tokens:
    SIGSTORE_ID_TOKEN:
      aud: sigstore
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master" && $CI_PIPELINE_SOURCE == "web"'
      when: manual
    - if: '$CI_COMMIT_REF_NAME == "next" && $CI_PIPELINE_SOURCE == "web"'
      when: manual
    - if: '$CI_COMMIT_REF_NAME =~ /^release\// && $CI_PIPELINE_SOURCE == "web"'
      when: manual
  script:
    - npm exec semantic-release

.downstream: &downstream
  stage: postrelease
  only:
    - tags
  variables:
    UPSTREAM_VERSION: "${CI_COMMIT_TAG}"

cypress-html-validate:
  <<: *downstream
  trigger: html-validate/cypress-html-validate

demo:
  <<: *downstream
  trigger: html-validate/demo

example-plugin:
  <<: *downstream
  trigger: html-validate/example-plugin

grunt-html-validate:
  <<: *downstream
  trigger: html-validate/grunt-html-validate

html-validate-angular:
  <<: *downstream
  trigger: html-validate/html-validate-angular

html-validate-jest-snapshot:
  <<: *downstream
  trigger: html-validate/html-validate-jest-snapshot

html-validate-vue:
  <<: *downstream
  trigger: html-validate/html-validate-vue

html-validate-vue-webpack-plugin:
  <<: *downstream
  trigger: html-validate/html-validate-vue

protractor-html-validate:
  <<: *downstream
  trigger: html-validate/protractor-html-validate

try-online:
  <<: *downstream
  trigger: html-validate/try-online

vue-cli-plugin-html-validate:
  <<: *downstream
  trigger: html-validate/vue-cli-plugin-html-validate
